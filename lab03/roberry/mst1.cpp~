using namespace std;
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <map>
#include <set>
#define MAXN 500001
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
////////////// Prewritten code follows. Look down for solution. ////////////////
class UnionFind {                                              // OOP style
private:
  vi p, rank, setSize;                       // remember: vi is vector<int>
  int numSets;
public:
  UnionFind(int N) {
    setSize.assign(N, 1); numSets = N; rank.assign(N, 0);
    p.assign(N, 0); for (int i = 0; i < N; i++) p[i] = i; }
  int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
  bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
  void unionSet(int i, int j) { 
    if (!isSameSet(i, j)) { numSets--; 
    int x = findSet(i), y = findSet(j);
    // rank is used to keep the tree short
    if (rank[x] > rank[y]) { p[y] = x; setSize[x] += setSize[y]; }
    else                   { p[x] = y; setSize[y] += setSize[x];
                             if (rank[x] == rank[y]) rank[y]++; } } }
  int numDisjointSets() { return numSets; }
  int sizeOfSet(int i) { return setSize[findSet(i)]; }
};
struct Edge {
int u, v, w;
int index;
bool operator < (const Edge &t) const {
return w < t.w;
}
};
enum { Pending, None, Any, One };
int ans[MAXN];
const int WHITE = 0, GRAY = 1, BLACK = 2;
int colors[MAXN], d[MAXN], low[MAXN];
int timeCount;
void dfs(int u, int pid, const vector< vector<pair<int, int> > > &g) {
d[u] = low[u] = ++timeCount;
colors[u] = GRAY;
for (vector<pair<int, int> >::const_iterator e = g[u].begin(); e != g[u].end(); ++e) {
int t = e->first, id = e->second;
if (id == pid)
continue;
if (colors[t] == WHITE) {
dfs(t, id, g);
low[u] = min(low[u], low[t]);
} else {
low[u] = min(low[u], d[t]);
}
}
if (pid != -1) {
if (low[u] == d[u]) {
ans[pid] = Any;
}
}
colors[u] = BLACK;
}
void markBridges(const vector< vector<pair<int, int> > > &g) {
timeCount = 0;
int n = g.size();
for (int i = 0; i < n; ++i) {
colors[i] = WHITE;
}
for (int i = 0; i < n; ++i) {
if (colors[i] == WHITE) {
dfs(i, -1, g);
}
}
}
int main(){
int n, M;
cin >> n >> M;
vector<Edge> e(M);
for (int i = 0; i < M; ++i) {
e[i].index = i;
cin >> e[i].u >> e[i].v >> e[i].w;
e[i].u--, e[i].v--;
}
sort(e.begin(), e.end());
UnionFind UF(n);
for (int i = 0; i < M; ++i){
int j = i;
while (j < M and e[j].w == e[i].w) j++;
map<int, int> pos; int nextPos = 0;
vector< vector<pair<int, int> > > g(UF.numDisjointSets());
// group is [i, j)
for (int k = i; k < j; ++k) {
const Edge &edge = e[k];
int left = UF.findSet(edge.u), right = UF.findSet(edge.v);
if (left == right) {
ans[edge.index] = None;
} else {
int leftPos = pos.count(left) ? pos[left] : (pos[left] = nextPos++);
int rightPos = pos.count(right) ? pos[right] : (pos[right] = nextPos++);
g[leftPos].push_back( make_pair(rightPos, edge.index) );
g[rightPos].push_back( make_pair(leftPos, edge.index) );
}
}
markBridges(g);
for (int k = i; k < j; ++k) {
const Edge &edge = e[k];
 if(ans[edge.index]=Pending) ans[edge.index]=One;
UF.unionSet(edge.u,edge.v);

}
i = j - 1;
}
int none=0;int sure=0;int maybe=0;
for (int i = 0; i < M; ++i) {
int k = ans[i];
if (k == None) {
 none++;
} else if (k == One) {
 maybe++;
} else { 
 sure++;
}
}
cout<<sure<<"\n"<<none<<"\n"<<M-sure-none<<"\n";
return 0;
}
